var router=function(Win){
//路由基类
function Router(){this.cache={};this.defaultHash="m=friendRaise&a=launch"}Router.prototype={
//请求本地JS
requestScript:function(opts){return $.ajax({url:opts.url,type:"GET",dataType:"script",cache:false}).fail(function(){console.error("请求js"+opts.url+"失败")})},
//解析Url
parseUrl:function(){var that=this;
//没有hash
if(!location.hash){location.hash=that.defaultHash}
//检测hash  格式
var res=/^\#\w\=\w+\&\w\=\w+$/.test(location.hash);if(!res){console.error("请输入正确的hash格式,如 m=friendRaise&a=launch")}var paras=location.hash.substring(1).split("&");var module=paras[0].split("=")[1];var action=paras[1].split("=")[1];return{module:module,action:action,baseUrl:window.location.protocol+"//"+window.location.hostname+(window.location.port?":"+window.location.port:"")}},
//寻址切换模块
requestModuleByHash:function(){var that=this;that.cache.currentRoute=that.parseUrl();var module=that.cache.currentRoute.module;var action=that.cache.currentRoute.action;var X=xbn();
//如果有该模块
if(X.isInEventSystem(X.oContext,module)){X.publish(module,X)}else{that.requestScript({url:"./js/modules/"+module+".js"}).done(function(){X.publish(module,X)})}},/* switchRoute: function(hash){
             var that = this;
             location.hash = hash;
             that.requestModuleByHash();
             },*/
start:function(){var that=this;that.requestModuleByHash();
//监听hash (依赖jquery.ba-hashchange.js)
$(window).hashchange(function(ev){that.requestModuleByHash()})}};Win.router=new Router;Win.router.start();return Win.router}(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L3Rlc3QvYnVpbGQtcm91dGVyODg4OC9idWlsZC1yb3V0ZXIvY29kZS9zcmMvanMvcm91dGVyLmpzIl0sIm5hbWVzIjpbInJvdXRlciIsIldpbiIsIlJvdXRlciIsInRoaXMiLCJjYWNoZSIsImRlZmF1bHRIYXNoIiwicHJvdG90eXBlIiwicmVxdWVzdFNjcmlwdCIsIm9wdHMiLCIkIiwiYWpheCIsInVybCIsInR5cGUiLCJkYXRhVHlwZSIsImZhaWwiLCJjb25zb2xlIiwiZXJyb3IiLCJwYXJzZVVybCIsInRoYXQiLCJsb2NhdGlvbiIsImhhc2giLCJyZXMiLCJ0ZXN0IiwicGFyYXMiLCJzdWJzdHJpbmciLCJzcGxpdCIsIm1vZHVsZSIsImFjdGlvbiIsImJhc2VVcmwiLCJ3aW5kb3ciLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsInJlcXVlc3RNb2R1bGVCeUhhc2giLCJjdXJyZW50Um91dGUiLCJYIiwieGJuIiwiaXNJbkV2ZW50U3lzdGVtIiwib0NvbnRleHQiLCJwdWJsaXNoIiwiZG9uZSIsInN0YXJ0IiwiaGFzaGNoYW5nZSIsImV2Il0sIm1hcHBpbmdzIjoiQUFDSSxHQUFJQSxRQUFTLFNBQVVDOztBQUduQixRQUFTQyxVQUNMQyxLQUFLQyxRQUNMRCxNQUFLRSxZQUFjLHlCQUV2QkgsT0FBT0k7O0FBRUhDLGNBQWUsU0FBVUMsTUFDckIsTUFBT0MsR0FBRUMsTUFDTEMsSUFBS0gsS0FBS0csSUFDVkMsS0FBTSxNQUNOQyxTQUFVLFNBQ1ZULE1BQU8sUUFDUlUsS0FBSyxXQUNKQyxRQUFRQyxNQUFNLE9BQVFSLEtBQUtHLElBQUs7O0FBS3hDTSxTQUFVLFdBRU4sR0FBSUMsTUFBT2Y7O0FBR1gsSUFBSWdCLFNBQVNDLEtBQUssQ0FDZEQsU0FBU0MsS0FBT0YsS0FBS2I7O0FBSXpCLEdBQUlnQixLQUFNLHVCQUF1QkMsS0FBS0gsU0FBU0MsS0FDL0MsS0FBSUMsSUFBSSxDQUNKTixRQUFRQyxNQUFNLHlDQUdsQixHQUFJTyxPQUFRSixTQUFTQyxLQUFLSSxVQUFVLEdBQUdDLE1BQU0sSUFDN0MsSUFBSUMsUUFBU0gsTUFBTSxHQUFHRSxNQUFNLEtBQUssRUFDakMsSUFBSUUsUUFBU0osTUFBTSxHQUFHRSxNQUFNLEtBQUssRUFFakMsUUFDSUMsT0FBUUEsT0FDUkMsT0FBUUEsT0FDUkMsUUFBVUMsT0FBT1YsU0FBU1csU0FBVyxLQUFPRCxPQUFPVixTQUFTWSxVQUFZRixPQUFPVixTQUFTYSxLQUFPLElBQU1ILE9BQU9WLFNBQVNhLEtBQU87O0FBTXBJQyxvQkFBcUIsV0FDakIsR0FBSWYsTUFBT2YsSUFFWGUsTUFBS2QsTUFBTThCLGFBQWVoQixLQUFLRCxVQUUvQixJQUFJUyxRQUFTUixLQUFLZCxNQUFNOEIsYUFBYVIsTUFDckMsSUFBSUMsUUFBU1QsS0FBS2QsTUFBTThCLGFBQWFQLE1BR3JDLElBQUlRLEdBQUlDOztBQUVSLEdBQUdELEVBQUVFLGdCQUFpQkYsRUFBRUcsU0FBVVosUUFBUyxDQUN2Q1MsRUFBRUksUUFBUWIsT0FBT1MsT0FDaEIsQ0FDRGpCLEtBQUtYLGVBQ0RJLElBQUssZ0JBQWlCZSxPQUFRLFFBQy9CYyxLQUFLLFdBQ0pMLEVBQUVJLFFBQVFiLE9BQU9TOzs7OztBQVk3Qk0sTUFBTyxXQUNILEdBQUl2QixNQUFPZixJQUVYZSxNQUFLZTs7QUFHTHhCLEVBQUVvQixRQUFRYSxXQUFZLFNBQVNDLElBQzNCekIsS0FBS2UseUJBUWpCaEMsS0FBSUQsT0FBUyxHQUFJRSxPQUNqQkQsS0FBSUQsT0FBT3lDLE9BRVgsT0FBT3hDLEtBQUlELFFBRVpHIiwiZmlsZSI6InJvdXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4gICAgdmFyIHJvdXRlciA9IChmdW5jdGlvbihXaW4pe1xyXG5cclxuICAgICAgICAvL+i3r+eUseWfuuexu1xyXG4gICAgICAgIGZ1bmN0aW9uIFJvdXRlcigpe1xyXG4gICAgICAgICAgICB0aGlzLmNhY2hlID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdEhhc2ggPSAnbT1mcmllbmRSYWlzZSZhPWxhdW5jaCc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBSb3V0ZXIucHJvdG90eXBlID0ge1xyXG4gICAgICAgICAgICAvL+ivt+axguacrOWcsEpTXHJcbiAgICAgICAgICAgIHJlcXVlc3RTY3JpcHQ6IGZ1bmN0aW9uIChvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IG9wdHMudXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwic2NyaXB0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcign6K+35rGCanMnKyBvcHRzLnVybCArJ+Wksei0pScpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLy/op6PmnpBVcmxcclxuICAgICAgICAgICAgcGFyc2VVcmw6IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8v5rKh5pyJaGFzaFxyXG4gICAgICAgICAgICAgICAgaWYoIWxvY2F0aW9uLmhhc2gpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSB0aGF0LmRlZmF1bHRIYXNoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8v5qOA5rWLaGFzaCAg5qC85byPXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gL15cXCNcXHdcXD1cXHcrXFwmXFx3XFw9XFx3KyQvLnRlc3QobG9jYXRpb24uaGFzaCk7XHJcbiAgICAgICAgICAgICAgICBpZighcmVzKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfor7fovpPlhaXmraPnoa7nmoRoYXNo5qC85byPLOWmgiBtPWZyaWVuZFJhaXNlJmE9bGF1bmNoJylcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyYXMgPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKS5zcGxpdCgnJicpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZHVsZSA9IHBhcmFzWzBdLnNwbGl0KCc9JylbMV07XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gcGFyYXNbMV0uc3BsaXQoJz0nKVsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZTogbW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VVcmw6ICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgKyAod2luZG93LmxvY2F0aW9uLnBvcnQgPyBcIjpcIiArIHdpbmRvdy5sb2NhdGlvbi5wb3J0IDogXCJcIilcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvL+Wvu+WdgOWIh+aNouaooeWdl1xyXG4gICAgICAgICAgICByZXF1ZXN0TW9kdWxlQnlIYXNoOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoYXQuY2FjaGUuY3VycmVudFJvdXRlID0gdGhhdC5wYXJzZVVybCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBtb2R1bGUgPSB0aGF0LmNhY2hlLmN1cnJlbnRSb3V0ZS5tb2R1bGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gdGhhdC5jYWNoZS5jdXJyZW50Um91dGUuYWN0aW9uO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgWCA9IHhibigpO1xyXG4gICAgICAgICAgICAgICAgLy/lpoLmnpzmnInor6XmqKHlnZdcclxuICAgICAgICAgICAgICAgIGlmKFguaXNJbkV2ZW50U3lzdGVtKCBYLm9Db250ZXh0LCBtb2R1bGUgKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgWC5wdWJsaXNoKG1vZHVsZSxYKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVxdWVzdFNjcmlwdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJy4vanMvbW9kdWxlcy8nKyBtb2R1bGUgKycuanMnXHJcbiAgICAgICAgICAgICAgICAgICAgfSkuZG9uZShmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBYLnB1Ymxpc2gobW9kdWxlLFgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8qIHN3aXRjaFJvdXRlOiBmdW5jdGlvbihoYXNoKXtcclxuICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBoYXNoO1xyXG4gICAgICAgICAgICAgdGhhdC5yZXF1ZXN0TW9kdWxlQnlIYXNoKCk7XHJcbiAgICAgICAgICAgICB9LCovXHJcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoYXQucmVxdWVzdE1vZHVsZUJ5SGFzaCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8v55uR5ZCsaGFzaCAo5L6d6LWWanF1ZXJ5LmJhLWhhc2hjaGFuZ2UuanMpXHJcbiAgICAgICAgICAgICAgICAkKHdpbmRvdykuaGFzaGNoYW5nZSggZnVuY3Rpb24oZXYpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVxdWVzdE1vZHVsZUJ5SGFzaCgpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIFdpbi5yb3V0ZXIgPSBuZXcgUm91dGVyKCk7XHJcbiAgICAgICAgV2luLnJvdXRlci5zdGFydCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gV2luLnJvdXRlcjtcclxuXHJcbiAgICB9KSh0aGlzKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qICAgIOS9v+eUqCAgc3RhcnRcclxuICAgICAkKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICQoJyNhJykuY2xpY2soZnVuY3Rpb24oKXtcclxuICAgICAvL3JvdXRlci5zd2l0Y2hSb3V0ZSgnbT1hJmI9MicpO1xyXG4gICAgIGxvY2F0aW9uLmhhc2ggPSAnbT1hJmI9Mic7XHJcbiAgICAgfSlcclxuXHJcbiAgICAgJCgnI2InKS5jbGljayhmdW5jdGlvbigpe1xyXG5cclxuICAgICAvLyByb3V0ZXIuc3dpdGNoUm91dGUoJ209YiZiPTInKTtcclxuICAgICBsb2NhdGlvbi5oYXNoID0gJ209YiZiPTInO1xyXG5cclxuICAgICB9KVxyXG4gICAgICQoJyNjJykuY2xpY2soZnVuY3Rpb24oKXtcclxuICAgICBkZWJ1Z2dlcjtcclxuICAgICAvLyByb3V0ZXIuc3dpdGNoUm91dGUoJ209YiZiPTInKTtcclxuICAgICBsb2NhdGlvbi5oYXNoID0gJ209YyZiPTInO1xyXG5cclxuICAgICB9KVxyXG4gICAgIH0pKi9cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy9AIHNvdXJjZVVSTD1yb3V0ZXIuanNcclxuIl19
